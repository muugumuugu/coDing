# Ackermann function
# https://rosettacode.org/wiki/Ackermann_function#Processing.R
# Processing 3.4
# 2009-06-30 ShinTakezou (R)
# 2020-04-17 Jeremy Douglass
# 
# The Ackermann function is a classic example of a recursive function, notable
# especially because it is not a primitive recursive function. It grows very
# quickly in value, as does the size of its call tree.
# 
# The Ackermann function is usually defined as follows:
# 
#          (  n+1                if m = 0
# A(m,n) = (  A(m-1, 1)          if m > 0 and n = 0
#          (  A(m-1, A(m, n-1))  if m > 0 and n > 0
# Its arguments are never negative and it always terminates.
# 
# Task:
# 
# Write a function which returns the value of A(m,n).
# Arbitrary precision is preferred (since the function grows so quickly),
# but not required.

setup <- function() {
  for (m in 0:3) {
    for (n in 0:4) {
      stdout$print(paste(ackermann(m, n), " "))
    }
    stdout$println("")
  }
}

ackermann <- function(m, n) {
  if ( m == 0 ) {
    return(n+1)
  } else if ( n == 0 ) {
    ackermann(m-1, 1)
  } else {
    ackermann(m-1, ackermann(m, n-1))
  }
}

# Output:
# 
# 1  2  3  4  5  
# 2  3  4  5  6  
# 3  5  7  9  11  
# 5  13  29  61  125

# note that Processing.R exceeds its stack depth at ~ n==6
# and returns null.
# -- see also https://rosettacode.org/wiki/Find_limit_of_recursion#R
